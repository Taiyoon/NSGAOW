
2. 数据交换（传输等待）时延的不确定性

- 等待时间的不确定性：
模型中考虑了任务间数据交换的等待时延（例如加密后的传输等待），但该时延实际上受调度顺序以及资源并发使用情况影响，具有不确定性和非线性特点。

- 非线性目标函数带来的复杂性：
由于等待时间依赖于任务排序，不同任务间存在“资源解耦”与“并行执行”的多种情形，这使得完工时间目标函数变得非线性且难以精确量化。一方面，这在理论上是精巧且闭环的假设，但在实际算法设计时就引入了额外的复杂性和求解难度。

2. 约束条件是非凸困难的，然而我们原始的目标函数也是非凸的，因此我们尝试修改约束条件，将约束条件的非凸性放到目标函数里处理，并利用元启发式算法在处理非凸优化问题的优势，解决本问题
- 我们需要分析为何约束条件是非凸的

3. 原有优化问题存在优化难点：

文中构建的任务调度模型通过双目标优化函数协调任务分配与安全策略选择，其完工时间的计算隐含假设虚拟机内存在严格任务执行顺序。然而该时序关系作为优化目标的核心参数，其生成逻辑在算法章节尚未得到充分阐释。这也导致“机会窗口利用算法”的设计动机不明确

1. 优化问题是非凸的：

（大概是OW排序的核心论述）
目前的调度算法对于多工作流的处理关注不足，他们有的方案将多个工作流合成为一个大的工作流（在出口与入口处增加伪任务）并尝试整体调度，或者将任务先排序，调度系统一次调度一个任务。

为了说明当前两种处理多DAG任务算法的不足，我们设计了一个极端的模型（也就是混合云中的协作任务LW模型）。该LW中存在任务间依赖关系以及子任务与公有云、私有云虚拟机的绑定，经过本节后文的分析，传统基于列表调度的方案都不可行。上一章我们从隐私数据保护的角度，表明了这个LW模型是具有现实意义的，那我们这一节让我们从调度算法角度分析当前两种多DAG任务调度算法的不足，并给出合理的调度算法。

用来批评基于在单工作流假设前提下设计的调度算法对于云间通信成本的关注不足，目前关注算法对于，导致在极端情况（也就是本身设计的协作任务中）下无法利用多个混合云的资源，并提出了一个

首先，我们看一看先对任务排序，再一次调度一个DAG任务的缺点：

这种调度方式在本文的极端场景下显然有重大缺陷，两台虚拟机退化成串行处理，是最差的任务调度方案。就算是处理原来的任务调度问题也存在缺陷。
% 好像跑题了，而且我是不是对这种调度方案过于简化了？
但这种调度方法优点是一次只调度一个任务，完成时间优化目标函数简单可以被转化成一个具有精确解的优化问题，可以使用线性规划或元启发式算法搜索更好的虚拟机分配方案，提升调度效果。

让我们探讨一下基于工作流合并（如HEFT等列表算法）的算法为什么是低效的？

经过合并的线性工作流在1私有1公有混合云环境中调度.假设所有任务的执行时间相同，根据FT进行排序，我们发现处于同一层级的任务的优先级相同，由于增加了一个伪出口点，我们可爱的调度算法对于多个任务之间相互抢占虚拟机资源对完成时间的影响毫无感知。会以任意顺序调度相同LW中相同位置的。这种问题会随着合并LW数量的增多愈发严重，最终导致工作流合并调度的效果甚至接近最差任务调度（的一半）
（假如任务执行时间不同呢？）

```ascii-graph
O
/  \
o  o
|  |
x  x
|  |
o  o
\  /
o
```
% 尽管我在上面埋汰了基于工作流合并的算法，但是考虑的是本文设计的极端场景，我说的这些坏话只是为了说明这个算法，没有其他想法
我需要为基于DAG合并的调度算法澄清一下，如果LW这个调度场景设计合理的向上秩（Upward Rank），进行排序，这个算法应该可以良好工作的。但是需要排序，计算复杂度至少为O（nlogn）。

我们基于任务已有顺序（例如到达时间、截止时间），提出一个工作流中存在“机会窗口”（OW）这个概念，这个机会窗口，虚拟机可以在机会窗口内提前处理下一个工作流，提高虚拟机利用率，降低整体完工时间与单个有依赖任务的完成时间。